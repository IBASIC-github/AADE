#-*- encoding: utf-8 -*-
'''
Created on 2015-08-10

@author: Baijie
'''

import argparse
from gensim import models
from aademodel import GlobalEqualBase, GlobalActv, LocalActv, Random, Similarity
        
def parse_args():
    '''
    Parses the node2vec arguments.
    '''
    parser = argparse.ArgumentParser(description="Activation test")

    parser.add_argument('--w2vmodel_path', nargs='?', default='../model/w2vmodel',
                        help='Input word2vec model, generated by Gensim toolkit')
    
    parser.add_argument('--stopwords_path', nargs='?', default='../data/stopwords.txt',
                        help='Input word2vec model, generated by Gensim toolkit')

    parser.add_argument('--input', nargs='?', default='../data/input.txt',
                        help='Input file path')
    
    parser.add_argument('--model_name', nargs='?', default='Global Actv',
                        help='Choose a model, options are Global equal base, Global Actv, Local Actv, Similarity and Random')

    parser.add_argument('--alpha', type=float, default=10.0,
                        help='Activation rate, decides now many implicit words are activated from a single text fragment. Default is 1.0')

    parser.add_argument('--beta', type=float, default=0.2,
                        help='Hyper parameter that tradeoff between word occurrence and word associations. Default is 0.2')

    parser.add_argument('--output', nargs='?', default='../data/output.txt',
                        help='Number of walks per source. Default is 10.')

    return parser.parse_args()

def read_file(f, stopwords):
    docs = []
    fread = open(f, 'r')
    if len(stopwords) > 0:
        stopwords = set(stopwords)
    for line in fread:
        line = line.strip()
        if line != '':
            docs.append([word for word in line.lower().split() if word not in stopwords])

    fread.close()
    return docs

def read_stopwords(f):
    stopwords = []
    if f != '':
        fread = open(f, 'r')
        stopwords = fread.read().split()
        fread.close()
    return stopwords

def write_file(f, docs):
    fwrite = open(f, 'w')
    for doc in docs:
        if len(doc) == 0:
            fwrite.write(' \n')
        else:
            fwrite.write(';'.join(doc) + '\n')

    fwrite.close()

if __name__ == "__main__":
    switch = {
        'Global equal base':lambda w2v_model:GlobalEqualBase(w2v_model),
        'Global Actv':lambda w2v_model:GlobalActv(w2v_model),
        'Local Actv':lambda w2v_model:LocalActv(w2v_model),
        'Similarity':lambda w2v_model:Random(w2v_model),
        'Random':lambda w2v_model:Similarity(w2v_model),
    }
    print 'Activation strat..'
    
    args = parse_args()
    
    stopwords = read_stopwords(args.stopwords_path)
    
    docs = read_file(args.input, stopwords)
    w2v_model = models.Word2Vec.load(args.w2vmodel_path)
    try:
        aade_model = switch[args.model_name](w2v_model)
    except KeyError as e:
        print e
    actv_words = aade_model.activation(dataset = docs, alpha = args.alpha, beta = args.beta)
    write_file(args.output, actv_words)
    
    print 'Activation finished. Results have been saved in ', args.output